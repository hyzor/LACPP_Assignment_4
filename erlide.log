15:56:46,753 I: (ErlangCore.java:64) : Starting CORE Thread[Worker-1,5,main]
15:56:46,761 I: (ErlangCore.java:79) : *** starting Erlide v0.29.6.201411211407 (core=0.24.11.201411211407) (model api=0.24.11.201411211407) *** (Cp1252) ui
15:56:46,793 I: (ErlangCore.java:86) : Started CORE
15:56:46,794 F: (ErlangPlugin.java:88) : Core started
15:56:48,300 F: (ErlangHostnameRetriever.java:40) : Test long hostname: Win81-HP-Laptop.student.uu.se
15:56:49,828 W: (ErlangHostnameRetriever.java:46) : Can't use Win81-HP-Laptop.student.uu.se as long name
15:56:51,790 F: (ErlangHostnameRetriever.java:40) : Test long hostname: 130.243.197.45
15:56:52,858 W: (ErlangHostnameRetriever.java:46) : Can't use 130.243.197.45 as long name
15:56:53,500 F: (ErlangHostnameRetriever.java:40) : Test short hostname: Win81-HP-Laptop
15:56:53,529 F: (HostnameUtils.java:74) : Detected:: Win81-HP-Laptop && null
15:56:53,595 F: (BackendActivator.java:25) : Backend plugin started
15:56:53,605 I: (ErlideUIPlugin.java:130) : Starting UI Thread[Worker-1,5,main]
15:56:53,613 F: (ModelActivator.java:19) : Starting Erlang model api
15:56:53,652 F: (BackendFactory.java:43) : Create ide backend 17.3.0
15:56:53,653 F: (BackendFactory.java:57) : Create backend c752b_Jesper_cdc18c_erlide
15:56:53,862 F: (OtpNodeProxy.java:309) : Runtime c752b_Jesper_cdc18c_erlide@Win81-HP-Laptop starting
15:56:53,865 F: (ManagedOtpNodeProxy.java:62) : START node :> [C:\Dev\Tools\erl6.2/bin/erl, -sname, c752b_Jesper_cdc18c_erlide@Win81-HP-Laptop, -setcookie, erlide] *** C:\Dev\Eclipse_workspace
15:56:53,900 F: (OtpNodeProxy.java:214) : c752b_Jesper_cdc18c_erlide@Win81-HP-Laptop: waiting connection to peer... 
15:56:54,439 F: (OtpNodeProxy.java:314) : Runtime c752b_Jesper_cdc18c_erlide@Win81-HP-Laptop running
15:56:54,606 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5cdc27d@Win81-HP-Laptop'}
15:56:54,609 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
15:56:54,647 F: (ModelActivator.java:30) : Started model api
15:56:54,671 I: (ErlideUIPlugin.java:152) : Started UI
15:59:06,354 F: (InternalBuilder.java:202) : Will compile 5 resource(s)
15:59:06,358 F: (BackendFactory.java:50) : Create build backend 17
15:59:06,360 F: (BackendFactory.java:57) : Create backend 17_c752b_Jesper_cfc7f8
15:59:06,367 F: (OtpNodeProxy.java:309) : Runtime 17_c752b_Jesper_cfc7f8@Win81-HP-Laptop starting
15:59:06,368 F: (ManagedOtpNodeProxy.java:62) : START node :> [C:\Dev\Tools\erl6.2/bin/erl, -sname, 17_c752b_Jesper_cfc7f8@Win81-HP-Laptop, -setcookie, erlide] *** C:\Dev\Eclipse_workspace
15:59:06,383 F: (OtpNodeProxy.java:214) : 17_c752b_Jesper_cfc7f8@Win81-HP-Laptop: waiting connection to peer... 
15:59:06,926 F: (OtpNodeProxy.java:314) : Runtime 17_c752b_Jesper_cfc7f8@Win81-HP-Laptop running
15:59:07,080 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5cfc80b@Win81-HP-Laptop'}
15:59:07,082 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
15:59:13,322 F: (ErlTextHover.java:296) : otp doc {error,{variable,'T2'}}
15:59:26,521 F: (ErlangNodeLaunchShortcut.java:115) : ** Launch :: mergesort.erl
15:59:26,727 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
15:59:26,728 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
15:59:26,731 F: (ManagedOtpNodeProxy.java:62) : START node :> [C:\Dev\Tools\erl6.2/bin/erl, -sname, LACPP_Assignment_4@Win81-HP-Laptop, -setcookie, erlide] *** C:\Dev\Tools\eclipse
15:59:26,731 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
15:59:26,743 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
15:59:27,270 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
15:59:27,384 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5d01793@Win81-HP-Laptop'}
15:59:27,385 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
15:59:27,470 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@f359e65
15:59:27,571 F: (ErlangLaunchDelegate.java:111) : Started erts: LACPP_Assignment_4 >> LACPP_Assignment_4
15:59:58,596 W: (OtpNodeProxy.java:288) : Runtime LACPP_Assignment_4@Win81-HP-Laptop crashed, exit code: 1.
16:01:33,250 F: (FunctionGroup.java:290) : widgetSelected: e.item = null
16:01:33,251 F: (FunctionGroup.java:291) : widgetSelected: e.widget = TableColumn {Export / Name}
16:01:33,766 F: (FunctionGroup.java:290) : widgetSelected: e.item = TableItem {}
16:01:33,767 F: (FunctionGroup.java:291) : widgetSelected: e.widget = Table {}
16:01:35,947 F: (FunctionGroup.java:290) : widgetSelected: e.item = TableItem {}
16:01:35,948 F: (FunctionGroup.java:291) : widgetSelected: e.widget = Table {}
16:01:39,054 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:02:38,143 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:03:13,988 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,1,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-1"}
16:03:25,803 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:03:39,642 F: (ErlTextHover.java:296) : otp doc {local,export,1}
16:03:41,192 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:06:02,361 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:06:02,361 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:06:02,364 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:06:02,364 F: (ManagedOtpNodeProxy.java:62) : START node :> [C:\Dev\Tools\erl6.2/bin/erl, -sname, LACPP_Assignment_4@Win81-HP-Laptop, -setcookie, erlide] *** C:\Dev\Tools\eclipse
16:06:02,377 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:06:02,923 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:06:03,032 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5d62105@Win81-HP-Laptop'}
16:06:03,032 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:06:03,059 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@74271415
16:06:03,105 F: (ErlangLaunchDelegate.java:111) : Started erts: LACPP_Assignment_4 >> LACPP_Assignment_4
16:08:42,836 F: (ErlParser.java:341) : unknown: {other,{{26,26,521},2},io,[{token,atom,26,521,2,io,"io",u,u},{token,':',26,523,1,u,":",u,u},{token,atom,26,524,6,format,"format",u,u},{token,'(',26,530,1,u,"(",u,u},{token,string,26,531,16,"Hello world!~n",""Hello world!~n"",u,u},{token,',',26,547,1,u,",",u,u},{token,'[',26,549,1,u,"[",u,u},{token,']',26,550,1,u,"]",u,u},{token,')',26,551,1,u,")",u,u},{token,dot,26,552,1,u,".",u,u}]}
16:08:44,554 F: (ErlParser.java:341) : unknown: {other,{{26,26,522},2},io,[{token,atom,26,522,2,io,"io",u,u},{token,':',26,524,1,u,":",u,u},{token,atom,26,525,6,format,"format",u,u},{token,'(',26,531,1,u,"(",u,u},{token,string,26,532,16,"Hello world!~n",""Hello world!~n"",u,u},{token,',',26,548,1,u,",",u,u},{token,'[',26,550,1,u,"[",u,u},{token,']',26,551,1,u,"]",u,u},{token,')',26,552,1,u,")",u,u},{token,dot,26,553,1,u,".",u,u}]}
16:08:45,394 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:08:50,249 F: (ErlParser.java:341) : unknown: {other,{{26,26,522},2},io,[{token,atom,26,522,2,io,"io",u,u},{token,':',26,524,1,u,":",u,u},{token,atom,26,525,6,format,"format",u,u},{token,'(',26,531,1,u,"(",u,u},{token,string,26,532,22,"Merging doneworld!~n",""Merging doneworld!~n"",u,u},{token,',',26,554,1,u,",",u,u},{token,'[',26,556,1,u,"[",u,u},{token,']',26,557,1,u,"]",u,u},{token,')',26,558,1,u,")",u,u},{token,dot,26,559,1,u,".",u,u}]}
16:08:51,672 F: (ErlParser.java:341) : unknown: {other,{{26,26,522},2},io,[{token,atom,26,522,2,io,"io",u,u},{token,':',26,524,1,u,":",u,u},{token,atom,26,525,6,format,"format",u,u},{token,'(',26,531,1,u,"(",u,u},{token,string,26,532,17,"Merging done!~n",""Merging done!~n"",u,u},{token,',',26,549,1,u,",",u,u},{token,'[',26,551,1,u,"[",u,u},{token,']',26,552,1,u,"]",u,u},{token,')',26,553,1,u,")",u,u},{token,dot,26,554,1,u,".",u,u}]}
16:08:51,959 F: (ErlParser.java:341) : unknown: {other,{{26,26,522},2},io,[{token,atom,26,522,2,io,"io",u,u},{token,':',26,524,1,u,":",u,u},{token,atom,26,525,6,format,"format",u,u},{token,'(',26,531,1,u,"(",u,u},{token,string,26,532,17,"Merging done!~n",""Merging done!~n"",u,u},{token,',',26,549,1,u,",",u,u},{token,'[',26,551,1,u,"[",u,u},{token,']',26,552,1,u,"]",u,u},{token,')',26,553,1,u,")",u,u},{token,dot,26,554,1,u,".",u,u}]}
16:08:52,032 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:08:55,737 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:08:55,829 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:10:05,002 W: (OtpNodeProxy.java:288) : Runtime LACPP_Assignment_4@Win81-HP-Laptop crashed, exit code: 1.
16:10:08,426 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:10:08,427 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:10:08,429 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:10:08,429 F: (ManagedOtpNodeProxy.java:62) : START node :> [C:\Dev\Tools\erl6.2/bin/erl, -sname, LACPP_Assignment_4@Win81-HP-Laptop, -setcookie, erlide] *** C:\Dev\Tools\eclipse
16:10:08,441 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:10:08,969 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:10:09,078 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5d9e235@Win81-HP-Laptop'}
16:10:09,080 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:10:09,106 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@49604330
16:10:09,214 F: (ErlangLaunchDelegate.java:111) : Started erts: LACPP_Assignment_4 >> LACPP_Assignment_4
16:10:34,048 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:10:34,049 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:10:34,089 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:10:34,092 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:10:34,217 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:10:34,345 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5da4665@Win81-HP-Laptop'}
16:10:34,598 F: (ErlangDebugTarget.java:126) : debug started #Pid<LACPP_Assignment_4@Win81-HP-Laptop.78.0>
16:10:34,643 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@26370abe
16:10:36,987 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:10:36,988 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:10:36,991 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:10:36,999 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:10:37,114 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:10:37,194 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5da51c2@Win81-HP-Laptop'}
16:10:37,240 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@768ba603
16:10:59,925 F: (ErlangDebugTarget.java:289) : breakpointRemoved org.eclipse.core.internal.resources.Marker@ac01441c19
16:11:03,778 F: (ErlangNodeLaunchShortcut.java:115) : ** Launch :: mergesort.erl
16:11:03,844 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:11:03,845 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:11:03,849 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:11:03,855 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:11:03,972 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:11:04,135 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5dabaab@Win81-HP-Laptop'}
16:11:04,217 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@6a72d301
16:11:21,236 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="seq-2"></a><span class="bold_code">seq(From, To) -&gt; Seq</span><br><a name="seq-3"></a><span class="bold_code">seq(From, To, Incr) -&gt; Seq</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">From = To = Incr = integer()</span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code">Seq = [integer()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Returns a sequence of integers which starts with <span class="code">From</span>
          and contains the successive results of adding <span class="code">Incr</span> to
          the previous element, until <span class="code">To</span> has been reached or
          passed (in the latter case, <span class="code">To</span> is not an element of
          the sequence). <span class="code">Incr</span> defaults to 1.</p>
        <p>Failure: If <span class="code">To&lt;From-Incr</span> and <span class="code">Incr</span>
          is positive, or if <span class="code">To&gt;From-Incr</span> and <span class="code">Incr</span> is
          negative, or if <span class="code">Incr==0</span> and <span class="code">From/=To</span>.</p>
        <p>The following equalities hold for all sequences:</p>
        <div class="example"><pre>
length(lists:seq(From, To)) == To-From+1
length(lists:seq(From, To, Incr)) == (To-From+Incr) div Incr</pre></div>
        <p>Examples:</p>
        <div class="example"><pre>
&gt; <span class="bold_code">lists:seq(1, 10).</span>
[1,2,3,4,5,6,7,8,9,10]
&gt; <span class="bold_code">lists:seq(1, 20, 3).</span>
[1,4,7,10,13,16,19]
&gt; <span class="bold_code">lists:seq(1, 0, 1).</span>
[]
&gt; <span class="bold_code">lists:seq(10, 6, 4).</span>
[]
&gt; <span class="bold_code">lists:seq(1, 1, 0).</span>
[1]</pre></div>
      </p></div>
    <p>",{external,lists,seq,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/lists.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/lists.html","seq-2"}
16:11:22,614 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:11:22,708 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:11:22,778 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:11:22,844 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:11:22,916 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:11:53,771 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:11:54,428 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:12:02,654 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:12:05,032 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:12:05,033 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:12:05,036 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:12:05,042 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:12:05,159 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:12:05,323 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5dba9ae@Win81-HP-Laptop'}
16:12:05,324 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:12:05,369 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@3b298ba5
16:12:19,874 F: (ErlParser.java:341) : unknown: {other,{{8,8,180},13},'List_unsorted',[{token,var,8,180,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,194,1,u,"=",u,u},{token,'[',8,196,1,u,"[",u,u},{token,atom,8,197,6,random,"random",u,u},{token,':',8,203,1,u,":",u,u},{token,atom,8,204,7,uniform,"uniform",u,u},{token,'(',8,211,1,u,"(",u,u},{token,integer,8,212,5,12345,"12345",u,u},{token,')',8,217,1,u,")",u,u},{token,'||',8,219,2,u,"||",u,u},{token,var,8,222,1,'_',"_",u,u},{token,'<-',8,224,2,u,"<-",u,u},{token,atom,8,227,5,lists,"lists",u,u},{token,':',8,232,1,u,":",u,u},{token,atom,8,233,3,seq,"seq",u,u},{token,'(',8,236,1,u,"(",u,u},{token,integer,8,237,1,1,"1",u,u},{token,',',8,238,1,u,",",u,u},{token,integer,8,240,2,10,"10",u,u},{token,')',8,242,1,u,")",u,u},{token,']',8,243,1,u,"]",u,u},{token,',',8,244,1,u,",",u,u},{token,atom,9,248,9,test_sort,"test_sort",u,u},{token,'(',9,257,1,u,"(",u,u},{token,'{',9,258,1,u,"{",u,u},{token,var,9,259,1,'M',"M",u,u},{token,',',9,260,1,u,",",u,u},{token,var,9,262,1,'F',"F",u,u},{token,'}',9,263,1,u,"}",u,u},{token,',',9,264,1,u,",",u,u},{token,string,9,266,9,"numeric",""numeric"",u,u},{token,',',9,275,1,u,",",u,u},{token,var,9,277,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,290,1,u,")",u,u},{token,dot,9,291,1,u,".",u,u}]}
16:12:19,897 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted'}}
16:12:21,565 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:12:22,307 F: (ErlParser.java:341) : unknown: {other,{{8,8,168},13},'List_unsorted',[{token,var,8,168,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,182,1,u,"=",u,u},{token,'[',8,184,1,u,"[",u,u},{token,atom,8,185,6,random,"random",u,u},{token,':',8,191,1,u,":",u,u},{token,atom,8,192,7,uniform,"uniform",u,u},{token,'(',8,199,1,u,"(",u,u},{token,integer,8,200,5,12345,"12345",u,u},{token,')',8,205,1,u,")",u,u},{token,'||',8,207,2,u,"||",u,u},{token,var,8,210,1,'_',"_",u,u},{token,'<-',8,212,2,u,"<-",u,u},{token,atom,8,215,5,lists,"lists",u,u},{token,':',8,220,1,u,":",u,u},{token,atom,8,221,3,seq,"seq",u,u},{token,'(',8,224,1,u,"(",u,u},{token,integer,8,225,1,1,"1",u,u},{token,',',8,226,1,u,",",u,u},{token,integer,8,228,2,10,"10",u,u},{token,')',8,230,1,u,")",u,u},{token,']',8,231,1,u,"]",u,u},{token,',',8,232,1,u,",",u,u},{token,atom,9,236,9,test_sort,"test_sort",u,u},{token,'(',9,245,1,u,"(",u,u},{token,'{',9,246,1,u,"{",u,u},{token,var,9,247,1,'M',"M",u,u},{token,',',9,248,1,u,",",u,u},{token,var,9,250,1,'F',"F",u,u},{token,'}',9,251,1,u,"}",u,u},{token,',',9,252,1,u,",",u,u},{token,string,9,254,9,"numeric",""numeric"",u,u},{token,',',9,263,1,u,",",u,u},{token,var,9,265,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,278,1,u,")",u,u},{token,dot,9,279,1,u,".",u,u}]}
16:12:26,266 F: (ErlParser.java:341) : unknown: {other,{{8,8,183},13},'List_unsorted',[{token,var,8,183,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,197,1,u,"=",u,u},{token,'[',8,199,1,u,"[",u,u},{token,atom,8,200,6,random,"random",u,u},{token,':',8,206,1,u,":",u,u},{token,atom,8,207,7,uniform,"uniform",u,u},{token,'(',8,214,1,u,"(",u,u},{token,integer,8,215,5,12345,"12345",u,u},{token,')',8,220,1,u,")",u,u},{token,'||',8,222,2,u,"||",u,u},{token,var,8,225,1,'_',"_",u,u},{token,'<-',8,227,2,u,"<-",u,u},{token,atom,8,230,5,lists,"lists",u,u},{token,':',8,235,1,u,":",u,u},{token,atom,8,236,3,seq,"seq",u,u},{token,'(',8,239,1,u,"(",u,u},{token,integer,8,240,1,1,"1",u,u},{token,',',8,241,1,u,",",u,u},{token,integer,8,243,2,10,"10",u,u},{token,')',8,245,1,u,")",u,u},{token,']',8,246,1,u,"]",u,u},{token,',',8,247,1,u,",",u,u},{token,atom,9,251,9,test_sort,"test_sort",u,u},{token,'(',9,260,1,u,"(",u,u},{token,'{',9,261,1,u,"{",u,u},{token,var,9,262,1,'M',"M",u,u},{token,',',9,263,1,u,",",u,u},{token,var,9,265,1,'F',"F",u,u},{token,'}',9,266,1,u,"}",u,u},{token,',',9,267,1,u,",",u,u},{token,string,9,269,9,"numeric",""numeric"",u,u},{token,',',9,278,1,u,",",u,u},{token,var,9,280,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,293,1,u,")",u,u},{token,dot,9,294,1,u,".",u,u}]}
16:12:26,841 F: (ErlParser.java:341) : unknown: {other,{{8,8,184},13},'List_unsorted',[{token,var,8,184,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,198,1,u,"=",u,u},{token,'[',8,200,1,u,"[",u,u},{token,atom,8,201,6,random,"random",u,u},{token,':',8,207,1,u,":",u,u},{token,atom,8,208,7,uniform,"uniform",u,u},{token,'(',8,215,1,u,"(",u,u},{token,integer,8,216,5,12345,"12345",u,u},{token,')',8,221,1,u,")",u,u},{token,'||',8,223,2,u,"||",u,u},{token,var,8,226,1,'_',"_",u,u},{token,'<-',8,228,2,u,"<-",u,u},{token,atom,8,231,5,lists,"lists",u,u},{token,':',8,236,1,u,":",u,u},{token,atom,8,237,3,seq,"seq",u,u},{token,'(',8,240,1,u,"(",u,u},{token,integer,8,241,1,1,"1",u,u},{token,',',8,242,1,u,",",u,u},{token,integer,8,244,2,10,"10",u,u},{token,')',8,246,1,u,")",u,u},{token,']',8,247,1,u,"]",u,u},{token,',',8,248,1,u,",",u,u},{token,atom,9,252,9,test_sort,"test_sort",u,u},{token,'(',9,261,1,u,"(",u,u},{token,'{',9,262,1,u,"{",u,u},{token,var,9,263,1,'M',"M",u,u},{token,',',9,264,1,u,",",u,u},{token,var,9,266,1,'F',"F",u,u},{token,'}',9,267,1,u,"}",u,u},{token,',',9,268,1,u,",",u,u},{token,string,9,270,9,"numeric",""numeric"",u,u},{token,',',9,279,1,u,",",u,u},{token,var,9,281,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,294,1,u,")",u,u},{token,dot,9,295,1,u,".",u,u}]}
16:12:28,215 F: (ErlParser.java:341) : unknown: {other,{{8,8,185},13},'List_unsorted',[{token,var,8,185,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,199,1,u,"=",u,u},{token,'[',8,201,1,u,"[",u,u},{token,atom,8,202,6,random,"random",u,u},{token,':',8,208,1,u,":",u,u},{token,atom,8,209,7,uniform,"uniform",u,u},{token,'(',8,216,1,u,"(",u,u},{token,integer,8,217,5,12345,"12345",u,u},{token,')',8,222,1,u,")",u,u},{token,'||',8,224,2,u,"||",u,u},{token,var,8,227,1,'_',"_",u,u},{token,'<-',8,229,2,u,"<-",u,u},{token,atom,8,232,5,lists,"lists",u,u},{token,':',8,237,1,u,":",u,u},{token,atom,8,238,3,seq,"seq",u,u},{token,'(',8,241,1,u,"(",u,u},{token,integer,8,242,1,1,"1",u,u},{token,',',8,243,1,u,",",u,u},{token,integer,8,245,2,10,"10",u,u},{token,')',8,247,1,u,")",u,u},{token,']',8,248,1,u,"]",u,u},{token,',',8,249,1,u,",",u,u},{token,atom,9,253,9,test_sort,"test_sort",u,u},{token,'(',9,262,1,u,"(",u,u},{token,'{',9,263,1,u,"{",u,u},{token,var,9,264,1,'M',"M",u,u},{token,',',9,265,1,u,",",u,u},{token,var,9,267,1,'F',"F",u,u},{token,'}',9,268,1,u,"}",u,u},{token,',',9,269,1,u,",",u,u},{token,string,9,271,9,"numeric",""numeric"",u,u},{token,',',9,280,1,u,",",u,u},{token,var,9,282,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,295,1,u,")",u,u},{token,dot,9,296,1,u,".",u,u}]}
16:12:28,795 F: (ErlParser.java:341) : unknown: {other,{{8,8,184},13},'List_unsorted',[{token,var,8,184,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,198,1,u,"=",u,u},{token,'[',8,200,1,u,"[",u,u},{token,atom,8,201,6,random,"random",u,u},{token,':',8,207,1,u,":",u,u},{token,atom,8,208,7,uniform,"uniform",u,u},{token,'(',8,215,1,u,"(",u,u},{token,integer,8,216,5,12345,"12345",u,u},{token,')',8,221,1,u,")",u,u},{token,'||',8,223,2,u,"||",u,u},{token,var,8,226,1,'_',"_",u,u},{token,'<-',8,228,2,u,"<-",u,u},{token,atom,8,231,5,lists,"lists",u,u},{token,':',8,236,1,u,":",u,u},{token,atom,8,237,3,seq,"seq",u,u},{token,'(',8,240,1,u,"(",u,u},{token,integer,8,241,1,1,"1",u,u},{token,',',8,242,1,u,",",u,u},{token,integer,8,244,2,10,"10",u,u},{token,')',8,246,1,u,")",u,u},{token,']',8,247,1,u,"]",u,u},{token,',',8,248,1,u,",",u,u},{token,atom,9,252,9,test_sort,"test_sort",u,u},{token,'(',9,261,1,u,"(",u,u},{token,'{',9,262,1,u,"{",u,u},{token,var,9,263,1,'M',"M",u,u},{token,',',9,264,1,u,",",u,u},{token,var,9,266,1,'F',"F",u,u},{token,'}',9,267,1,u,"}",u,u},{token,',',9,268,1,u,",",u,u},{token,string,9,270,9,"numeric",""numeric"",u,u},{token,',',9,279,1,u,",",u,u},{token,var,9,281,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,294,1,u,")",u,u},{token,dot,9,295,1,u,".",u,u}]}
16:12:29,674 F: (ErlParser.java:341) : unknown: {other,{{8,8,186},13},'List_unsorted',[{token,var,8,186,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,200,1,u,"=",u,u},{token,'[',8,202,1,u,"[",u,u},{token,atom,8,203,6,random,"random",u,u},{token,':',8,209,1,u,":",u,u},{token,atom,8,210,7,uniform,"uniform",u,u},{token,'(',8,217,1,u,"(",u,u},{token,integer,8,218,5,12345,"12345",u,u},{token,')',8,223,1,u,")",u,u},{token,'||',8,225,2,u,"||",u,u},{token,var,8,228,1,'_',"_",u,u},{token,'<-',8,230,2,u,"<-",u,u},{token,atom,8,233,5,lists,"lists",u,u},{token,':',8,238,1,u,":",u,u},{token,atom,8,239,3,seq,"seq",u,u},{token,'(',8,242,1,u,"(",u,u},{token,integer,8,243,1,1,"1",u,u},{token,',',8,244,1,u,",",u,u},{token,integer,8,246,2,10,"10",u,u},{token,')',8,248,1,u,")",u,u},{token,']',8,249,1,u,"]",u,u},{token,',',8,250,1,u,",",u,u},{token,atom,9,254,9,test_sort,"test_sort",u,u},{token,'(',9,263,1,u,"(",u,u},{token,'{',9,264,1,u,"{",u,u},{token,var,9,265,1,'M',"M",u,u},{token,',',9,266,1,u,",",u,u},{token,var,9,268,1,'F',"F",u,u},{token,'}',9,269,1,u,"}",u,u},{token,',',9,270,1,u,",",u,u},{token,string,9,272,9,"numeric",""numeric"",u,u},{token,',',9,281,1,u,",",u,u},{token,var,9,283,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,296,1,u,")",u,u},{token,dot,9,297,1,u,".",u,u}]}
16:12:29,922 F: (ErlParser.java:341) : unknown: {other,{{8,8,186},13},'List_unsorted',[{token,var,8,186,13,'List_unsorted',"List_unsorted",u,u},{token,'=',8,200,1,u,"=",u,u},{token,'[',8,202,1,u,"[",u,u},{token,atom,8,203,6,random,"random",u,u},{token,':',8,209,1,u,":",u,u},{token,atom,8,210,7,uniform,"uniform",u,u},{token,'(',8,217,1,u,"(",u,u},{token,integer,8,218,5,12345,"12345",u,u},{token,')',8,223,1,u,")",u,u},{token,'||',8,225,2,u,"||",u,u},{token,var,8,228,1,'_',"_",u,u},{token,'<-',8,230,2,u,"<-",u,u},{token,atom,8,233,5,lists,"lists",u,u},{token,':',8,238,1,u,":",u,u},{token,atom,8,239,3,seq,"seq",u,u},{token,'(',8,242,1,u,"(",u,u},{token,integer,8,243,1,1,"1",u,u},{token,',',8,244,1,u,",",u,u},{token,integer,8,246,2,10,"10",u,u},{token,')',8,248,1,u,")",u,u},{token,']',8,249,1,u,"]",u,u},{token,',',8,250,1,u,",",u,u},{token,atom,9,254,9,test_sort,"test_sort",u,u},{token,'(',9,263,1,u,"(",u,u},{token,'{',9,264,1,u,"{",u,u},{token,var,9,265,1,'M',"M",u,u},{token,',',9,266,1,u,",",u,u},{token,var,9,268,1,'F',"F",u,u},{token,'}',9,269,1,u,"}",u,u},{token,',',9,270,1,u,",",u,u},{token,string,9,272,9,"numeric",""numeric"",u,u},{token,',',9,281,1,u,",",u,u},{token,var,9,283,13,'List_unsorted',"List_unsorted",u,u},{token,')',9,296,1,u,")",u,u},{token,dot,9,297,1,u,".",u,u}]}
16:12:29,980 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:12:35,204 F: (ErlTextHover.java:296) : otp doc {error,{variable,'F'}}
16:12:39,148 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:12:39,240 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:12:39,313 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:12:39,402 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:12:39,474 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:12:59,844 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:13:09,931 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:13:18,848 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted_'}}
16:13:36,878 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:13:50,374 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="uniform-1"></a><span class="bold_code">uniform(N) -&gt; integer() &gt;= 1</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">N = integer() &gt;= 1</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Given an integer <span class="code">N &gt;= 1</span>, <span class="code">uniform/1</span> returns a
          random integer uniformly distributed between <span class="code">1</span> and
          <span class="code">N</span>, updating the state in the process dictionary.</p>
      </p></div>
    <p>",{external,random,uniform,1,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/random.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/random.html","uniform-1"}
16:13:51,612 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted'}}
16:13:52,693 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_sorted'}}
16:13:53,530 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:13:53,649 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:13:53,743 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:13:53,832 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:13:55,642 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:13:59,627 F: (ErlangNodeLaunchShortcut.java:115) : ** Launch :: run_mergesort.erl
16:13:59,680 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:13:59,680 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:13:59,683 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:13:59,690 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:13:59,807 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:13:59,972 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5dd6986@Win81-HP-Laptop'}
16:13:59,973 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:14:00,017 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@98be09f
16:14:27,909 F: (ErlangDebugTarget.java:289) : breakpointRemoved org.eclipse.core.internal.resources.Marker@33272e859
16:14:33,440 F: (ErlangDebugTarget.java:289) : breakpointRemoved org.eclipse.core.internal.resources.Marker@33272e869
16:14:39,623 F: (ErlangDebugTarget.java:289) : breakpointRemoved org.eclipse.core.internal.resources.Marker@ac01441f25
16:14:40,801 F: (ErlangDebugTarget.java:289) : breakpointRemoved org.eclipse.core.internal.resources.Marker@ac01441e26
16:14:42,039 F: (ErlangDebugTarget.java:289) : breakpointRemoved org.eclipse.core.internal.resources.Marker@ac01441d27
16:14:46,392 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:14:50,756 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:14:50,756 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:14:50,758 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:14:50,765 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:14:50,883 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:14:50,982 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5de3109@Win81-HP-Laptop'}
16:14:50,983 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:14:51,006 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@3e05313
16:15:28,137 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:15:38,232 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:15:38,233 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:15:38,236 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:15:38,244 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:15:38,360 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:15:38,459 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5deea80@Win81-HP-Laptop'}
16:15:38,460 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:15:38,484 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@40b300e4
16:16:32,450 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="atom_to_list-1"></a><span class="bold_code">atom_to_list(Atom) -&gt; string()</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">Atom = atom()</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Returns a string which corresponds to the text
          representation of <span class="code">Atom</span>.</p>
        <div class="example"><pre>
&gt; <span class="bold_code">atom_to_list('Erlang').</span>
"Erlang"</pre></div>
      </p></div>
    <p>",{external,erlang,atom_to_list,1,"./src/preloaded.erl"},"c:/Dev/Tools/erl6.2/erts-6.2/doc/html/erlang.html","atom_to_list-1"}
16:17:32,268 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted'}}
16:17:38,882 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="fwrite-1"></a><span class="bold_code">fwrite(Format) -&gt; ok</span><br><a name="fwrite-2"></a><span class="bold_code">fwrite(Format, Data) -&gt; ok</span><br><a name="fwrite-3"></a><span class="bold_code">fwrite(IoDevice, Format, Data) -&gt; ok</span><br><a name="format-1"></a><span class="bold_code">format(Format) -&gt; ok</span><br><a name="format-2"></a><span class="bold_code">format(Format, Data) -&gt; ok</span><br><a name="format-3"></a><span class="bold_code">format(IoDevice, Format, Data) -&gt; ok</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">IoDevice = <span class="bold_code"><a href="#type-device">device()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Format = <span class="bold_code"><a href="#type-format">format()</a></span></span></div>
<div class="REFTYPES"><span class="bold_code">Data = [term()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Writes the items in <span class="code">Data</span> (<span class="code">[]</span>) on the standard
          output (<span class="code">IoDevice</span>) in accordance with <span class="code">Format</span>.
          <span class="code">Format</span> contains plain characters which are copied to
          the output device, and control sequences for formatting, see
          below. If <span class="code">Format</span> is an atom or a binary, it is first
          converted to a list with the aid of <span class="code">atom_to_list/1</span>
          or <span class="code">binary_to_list/1</span>.</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("Hello world!~n", []).</span>
Hello world!
ok</pre></div>
        <p>The general format of a control sequence is <span class="code">~F.P.PadModC</span>.
          The character <span class="code">C</span> determines the type of control sequence
          to be used, <span class="code">F</span> and <span class="code">P</span> are optional numeric
          arguments. If <span class="code">F</span>, <span class="code">P</span>, or <span class="code">Pad</span> is <span class="code">*</span>,
          the next argument in <span class="code">Data</span> is used as the numeric value
          of <span class="code">F</span> or <span class="code">P</span>.</p>
        <p><span class="code">F</span> is the <span class="code">field width</span> of the printed argument. A
          negative value means that the argument will be left justified
          within the field, otherwise it will be right justified. If no
          field width is specified, the required print width will be
          used. If the field width specified is too small, then the
          whole field will be filled with <span class="code">*</span> characters.</p>
        <p><span class="code">P</span> is the <span class="code">precision</span> of the printed argument. A
          default value is used if no precision is specified. The
          interpretation of precision depends on the control sequences.
          Unless otherwise specified, the argument <span class="code">within</span> is used
          to determine print width.</p>
        <p><span class="code">Pad</span> is the padding character. This is the character
          used to pad the printed representation of the argument so that
          it conforms to the specified field width and precision. Only
          one padding character can be specified and, whenever
          applicable, it is used for both the field width and precision.
          The default padding character is <span class="code">' '</span> (space).</p>
        <p><span class="code">Mod</span> is the control sequence modifier. It is either a
          single character (currently only <span class="code">t</span>, for Unicode
          translation, and <span class="code">l</span>, for stopping <span class="code">p</span> and
          <span class="code">P</span> from detecting printable characters, are supported)
          that changes the interpretation of Data.</p>
        <p>The following control sequences are available:</p>
        <dl>
          <dt><strong><span class="code">~</span></strong></dt>
          <dd>
            <p>The character <span class="code">~</span> is written.</p>
          </dd>
          <dt><strong><span class="code">c</span></strong></dt>
          <dd>
            <p>The argument is a number that will be interpreted as an
              ASCII code. The precision is the number of times the
              character is printed and it defaults to the field width,
              which in turn defaults to 1. The following example
              illustrates:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10.5c|~-10.5c|~5c|~n", [$a, $b, $c]).</span>
|     aaaaa|bbbbb     |ccccc|
ok</pre></div>
            <p>If the Unicode translation modifier (<span class="code">t</span>) is in effect,
	    the integer argument can be any number representing a
	    valid Unicode codepoint, otherwise it should be an integer
	    less than or equal to 255, otherwise it is masked with 16#FF:</p>
<div class="example"><pre>
2&gt; <span class="bold_code">io:fwrite("~tc~n",[1024]).</span>
\x{400}
ok
3&gt; <span class="bold_code">io:fwrite("~c~n",[1024]).</span>
^@
ok</pre></div>

          </dd>
          <dt><strong><span class="code">f</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]ddd.ddd</span>, where the precision is the number of
              digits after the decimal point. The default precision is 6
              and it cannot be less than 1.</p>
          </dd>
          <dt><strong><span class="code">e</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as
              <span class="code">[-]d.ddde+-ddd</span>, where the precision is the number
              of digits written. The default precision is 6 and it
              cannot be less than 2.</p>
          </dd>
          <dt><strong><span class="code">g</span></strong></dt>
          <dd>
            <p>The argument is a float which is written as <span class="code">f</span>, if
              it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written
              in the <span class="code">e</span> format. The precision is the number of
              significant digits. It defaults to 6 and should not be
              less than 2. If the absolute value of the float does not
              allow it to be written in the <span class="code">f</span> format with the
              desired number of significant digits, it is also written
              in the <span class="code">e</span> format.</p>
          </dd>
          <dt><strong><span class="code">s</span></strong></dt>
          <dd>
            <p>Prints the argument with the string syntax. The
              argument is, if no Unicode translation modifier is present, an 
              <span class="code">iolist()</span>, a <span class="code">binary()</span>, or an <span class="code">atom()</span>.
              If the Unicode translation modifier (<span class="code">t</span>) is in effect,
              the argument is <span class="code">unicode:chardata()</span>, meaning that
              binaries are in UTF-8. The characters
              are printed without quotes. The string is first truncated
	      by the given precision and then padded and justified
	      to the given field width. The default precision is the field width.</p>
            <p>This format can be used for printing any object and
              truncating the output so it fits a specified field:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("|~10w|~n", [{hey, hey, hey}]).</span>
|**********|
ok
2&gt; <span class="bold_code">io:fwrite("|~10s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey,h|
3&gt; <span class="bold_code">io:fwrite("|~-10.8s|~n", [io_lib:write({hey, hey, hey})]).</span>
|{hey,hey  |
ok</pre></div>
          <p>A list with integers larger than 255 is considered an error if the Unicode translation modifier is not given:</p>
<div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("~ts~n",[[1024]]).</span>
\x{400}
ok
5&gt; <span class="bold_code">io:fwrite("~s~n",[[1024]]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.26.0&gt;,"~s~n",[[1024]]]},
   ...</pre></div>
          </dd>
          <dt><strong><span class="code">w</span></strong></dt>
          <dd>
            <p>Writes data with the standard syntax. This is used to
              output Erlang terms. Atoms are printed within quotes if
              they contain embedded non-printable characters, and
              floats are printed accurately as the shortest, correctly
              rounded string.</p>
          </dd>
          <dt><strong><span class="code">p</span></strong></dt>
          <dd>
            <p>Writes the data with standard syntax in the same way as
              <span class="code">~w</span>, but breaks terms whose printed representation
              is longer than one line into many lines and indents each
              line sensibly. It also tries to detect lists of
              printable characters and to output these as strings. The
              Unicode translation modifier is used for determining
              what characters are printable. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span>
<span class="bold_code">{typename,"INTEGER"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},</span>
<span class="bold_code">{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].</span>
...
2&gt; <span class="bold_code">io:fwrite("~w~n", [T]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,
[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena
me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode
,implicit}]
ok
3&gt; <span class="bold_code">io:fwrite("~62p~n", [T]).</span>
[{attributes,[[{id,age,1.5},
               {mode,explicit},
               {typename,"INTEGER"}],
              [{id,cho},{mode,explicit},{typename,'Cho'}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
            <p>The field width specifies the maximum line length. It
              defaults to 80. The precision specifies the initial
              indentation of the term. It defaults to the number of
              characters printed on this line in the <span class="code">same</span> call to
              <span class="code">io:fwrite</span> or <span class="code">io:format</span>. For example, using
              <span class="code">T</span> above:</p>
            <div class="example"><pre>
4&gt; <span class="bold_code">io:fwrite("Here T = ~62p~n", [T]).</span>
Here T = [{attributes,[[{id,age,1.5},
                        {mode,explicit},
                        {typename,"INTEGER"}],
                       [{id,cho},
                        {mode,explicit},
                        {typename,'Cho'}]]},
          {typename,'Person'},
          {tag,{'PRIVATE',3}},
          {mode,implicit}]
ok</pre></div>
            <p>When the modifier <span class="code">l</span> is given no detection of
              printable character lists will take place. For example:</p>
            <div class="example"><pre>
5&gt; <span class="bold_code">S = [{a,"a"}, {b, "b"}].</span>
6&gt; <span class="bold_code">io:fwrite("~15p~n", [S]).</span>
[{a,"a"},
 {b,"b"}]
ok
7&gt; <span class="bold_code">io:fwrite("~15lp~n", [S]).</span>
[{a,[97]},
 {b,[98]}]
ok</pre></div>
            <p>Binaries that look like UTF-8 encoded strings will be
              output with the string syntax if the Unicode translation
              modifier is given:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~p~n",[[1024]]).</span>
[1024]
10&gt; <span class="bold_code">io:fwrite("~tp~n",[[1024]]).</span>
"\x{400}"
11&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;128,128&gt;&gt;]).</span>
&lt;&lt;128,128&gt;&gt;
12&gt; <span class="bold_code">io:fwrite("~tp~n", [&lt;&lt;208,128&gt;&gt;]).</span>
&lt;&lt;"\x{400}"/utf8&gt;&gt;
ok</pre></div>
          </dd>
          <dt><strong><span class="code">W</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~w</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example, using <span class="code">T</span> above:</p>
            <div class="example"><pre>
8&gt; <span class="bold_code">io:fwrite("~W~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
[{id,cho},{mode,...},{...}]]},{typename,'Person'},
{tag,{'PRIVATE',3}},{mode,implicit}]
ok</pre></div>
            <p>If the maximum depth has been reached, then it is
              impossible to read in the resultant output. Also, the
              <span class="code">,...</span> form in a tuple denotes that there are more
              elements in the tuple but these are below the print depth.</p>
          </dd>
          <dt><strong><span class="code">P</span></strong></dt>
          <dd>
            <p>Writes data in the same way as <span class="code">~p</span>, but takes an
              extra argument which is the maximum depth to which terms
              are printed. Anything below this depth is replaced with
              <span class="code">...</span>. For example:</p>
            <div class="example"><pre>
9&gt; <span class="bold_code">io:fwrite("~62P~n", [T,9]).</span>
[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],
              [{id,cho},{mode,...},{...}]]},
 {typename,'Person'},
 {tag,{'PRIVATE',3}},
 {mode,implicit}]
ok</pre></div>
          </dd>
          <dt><strong><span class="code">B</span></strong></dt>
          <dd>
            <p>Writes an integer in base 2..36, the default base is
              10. A leading dash is printed for negative integers.</p>
            <p>The precision field selects base. For example:</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.16B~n", [31]).</span>
1F
ok
2&gt; <span class="bold_code">io:fwrite("~.2B~n", [-19]).</span>
-10011
ok
3&gt; <span class="bold_code">io:fwrite("~.36B~n", [5*36+35]).</span>
5Z
ok</pre></div>
          </dd>
          <dt><strong><span class="code">X</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but takes an extra argument that is a
              prefix to insert before the number, but after the leading
              dash, if any.</p>
            <p>The prefix can be a possibly deep list of characters or
              an atom.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~X~n", [31,"10#"]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16X~n", [-31,"0x"]).</span>
-0x1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">#</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints the number with an Erlang style
              <span class="code">#</span>-separated base prefix.</p>
            <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~.10#~n", [31]).</span>
10#31
ok
2&gt; <span class="bold_code">io:fwrite("~.16#~n", [-31]).</span>
-16#1F
ok</pre></div>
          </dd>
          <dt><strong><span class="code">b</span></strong></dt>
          <dd>
            <p>Like <span class="code">B</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">x</span></strong></dt>
          <dd>
            <p>Like <span class="code">X</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">+</span></strong></dt>
          <dd>
            <p>Like <span class="code">#</span>, but prints lowercase letters.</p>
          </dd>
          <dt><strong><span class="code">n</span></strong></dt>
          <dd>
            <p>Writes a new line.</p>
          </dd>
          <dt><strong><span class="code">i</span></strong></dt>
          <dd>
            <p>Ignores the next term.</p>
          </dd>
        </dl>
        <p>Returns:</p>
        <dl>
          <dt><strong><span class="code">ok</span></strong></dt>
          <dd>
            <p>The formatting succeeded.</p>
          </dd>
        </dl>
        <p>If an error occurs, there is no output. For example:</p>
        <div class="example"><pre>
1&gt; <span class="bold_code">io:fwrite("~s ~w ~i ~w ~c ~n",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).</span>
abc def 'abc def'  {foo,1} A
ok
2&gt; <span class="bold_code">io:fwrite("~s", [65]).</span>
** exception exit: {badarg,[{io,format,[&lt;0.22.0&gt;,"~s","A"]},
                            {erl_eval,do_apply,5},
                            {shell,exprs,6},
                            {shell,eval_exprs,6},
                            {shell,eval_loop,3}]}
     in function  io:o_request/2</pre></div>
        <p>In this example, an attempt was made to output the single
          character 65 with the aid of the string formatting directive
          "~s".</p>
      </p></div>
    <p>",{external,io,format,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/io.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/io.html","format-2"}
16:17:39,230 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:17:39,349 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:17:39,414 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:17:39,484 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:17:39,555 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:17:41,169 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:18:20,626 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:18:20,627 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:18:20,634 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:18:20,641 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:18:20,761 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:18:20,863 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5e164dd@Win81-HP-Laptop'}
16:18:20,864 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:18:20,887 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@3b5282e6
16:19:04,979 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:20:24,155 F: (ErlTextHover.java:296) : otp doc {local,test_mergesort_numeric,1}
16:20:26,092 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:20:26,183 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:20:26,278 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:20:26,367 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:20:27,851 F: (ErlTextHover.java:296) : otp doc {local,module,1}
16:20:38,952 F: (ErlTextHover.java:296) : otp doc {local,split,3}
16:21:05,917 F: (ErlTextHover.java:296) : otp doc {local,run,0}
16:21:10,040 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:21:10,131 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:21:10,221 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:21:10,315 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:21:15,787 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted_'}}
16:21:22,408 F: (ErlTextHover.java:296) : otp doc {local,test_mergesort_numeric,1}
16:22:05,170 F: (ErlTextHover.java:296) : otp doc {local,msort_lte,1}
16:22:06,686 F: (ErlTextHover.java:296) : otp doc {local,msort_gte,1}
16:22:11,212 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_sorted'}}
16:22:15,050 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:22:15,140 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:22:15,232 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:22:15,317 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:22:28,972 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:22:28,972 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:22:28,979 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:22:28,983 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:22:29,099 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:22:29,201 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5e52ef3@Win81-HP-Laptop'}
16:22:29,202 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:22:29,225 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@27b32799
16:22:37,438 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted'}}
16:23:27,560 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:23:28,207 F: (ErlTextHover.java:296) : otp doc {error,{variable,'F'}}
16:23:30,868 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:23:30,961 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:23:31,044 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:23:31,127 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:23:35,048 F: (ErlangNodeLaunchShortcut.java:115) : ** Launch :: run_mergesort.erl
16:23:35,096 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:23:35,097 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:23:35,104 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:23:35,111 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:23:35,231 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:23:35,331 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5e63142@Win81-HP-Laptop'}
16:23:35,332 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:23:35,354 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@49b6b53
16:23:52,428 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:24:31,571 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:24:31,571 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:24:31,575 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:24:31,583 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:24:31,700 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:24:31,802 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5e70ddb@Win81-HP-Laptop'}
16:24:31,803 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:24:31,827 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@68ccd7d6
16:25:55,722 F: (ErlTextHover.java:296) : otp doc {error,{variable,'Half2'}}
16:26:54,721 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_sorted'}}
16:26:57,921 F: (ErlTextHover.java:296) : otp doc {local,test_mergesort_numeric,1}
16:27:01,291 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:27:01,384 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:27:01,451 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:27:01,521 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:27:01,592 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:27:26,986 F: (AbstractErlContentAssistProcessor.java:362) : no results
16:28:37,846 F: (ErlTextHover.java:296) : otp doc {error,{variable,'T2'}}
16:29:48,536 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:29:53,880 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:29:57,357 F: (ErlTextHover.java:296) : otp doc {local,lte,2}
16:29:58,468 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:30:17,714 F: (ErlTextHover.java:296) : otp doc {local,merge,2}
16:30:23,619 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:30:23,726 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:30:23,791 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:30:23,860 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:30:23,932 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:31:01,928 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:31:10,975 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:31:10,975 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:31:10,979 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:31:10,986 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:31:11,104 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:31:11,209 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5ed2606@Win81-HP-Laptop'}
16:31:11,210 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:31:11,233 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@5259ef0
16:32:11,095 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:32:11,193 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:32:12,076 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:32:12,454 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:32:12,546 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:32:25,212 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:32:29,627 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:32:29,628 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:32:29,630 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:32:29,639 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:32:29,759 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:32:29,858 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5ee5943@Win81-HP-Laptop'}
16:32:29,859 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:32:29,883 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@72727db7
16:34:31,714 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:34:33,625 F: (ErlTextHover.java:296) : otp doc {local,mergesort,1}
16:34:34,255 F: (ErlTextHover.java:296) : otp doc {local,msort,2}
16:34:37,456 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:34:52,115 F: (ErlTextHover.java:296) : otp doc {local,merge,3}
16:35:05,015 F: (ErlTextHover.java:296) : otp doc {error,{variable,'_'}}
16:35:10,560 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:35:10,652 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:35:13,360 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:35:15,330 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:35:15,768 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:37:40,545 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:37:42,669 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:37:42,670 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:37:42,672 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:37:42,679 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:37:42,798 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:37:42,897 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5f32013@Win81-HP-Laptop'}
16:37:42,898 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:37:42,920 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@1b8e6b88
16:39:17,927 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:39:18,024 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:18,094 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:18,165 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:18,235 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:23,117 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:39:23,210 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:23,281 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:23,350 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:23,423 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:39:31,562 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:39:33,276 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:39:33,276 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:39:33,282 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:39:33,288 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:39:33,406 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:39:33,507 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5f4d024@Win81-HP-Laptop'}
16:39:33,508 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:39:33,531 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@360a5480
16:40:45,971 F: (ErlTextHover.java:296) : otp doc {error,error}
16:41:26,405 F: (ErlTextHover.java:296) : otp doc {local,mergesort,1}
16:41:31,015 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:41:50,416 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:41:50,511 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:41:50,589 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:41:50,667 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:41:50,738 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:41:57,886 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:41:59,662 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:41:59,662 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:41:59,668 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:41:59,675 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:41:59,792 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:41:59,892 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5f70bf7@Win81-HP-Laptop'}
16:41:59,892 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:41:59,915 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@e9cc45a
16:43:33,958 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:43:34,054 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:34,124 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:34,196 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:34,268 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:39,453 F: (ErlTextHover.java:296) : otp doc {error,{variable,'Half1'}}
16:43:43,720 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:43:43,813 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:43,884 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:43,955 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:44,025 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:45,298 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:43:45,392 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:45,473 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:45,546 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:45,618 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:43:57,732 F: (ErlTextHover.java:296) : otp doc {local,msort,1}
16:44:00,325 F: (ErlTextHover.java:296) : otp doc {local,lte,2}
16:44:17,131 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:44:19,216 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:44:19,216 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:44:19,220 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:44:19,228 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:44:19,345 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:44:19,447 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5f92d17@Win81-HP-Laptop'}
16:44:19,448 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:44:19,472 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@4d4ec16e
16:44:59,308 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:45:02,548 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:45:02,642 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:45:02,736 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:45:02,821 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:45:09,423 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:45:09,424 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:45:09,427 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:45:09,435 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:45:09,552 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:45:09,652 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5f9f136@Win81-HP-Laptop'}
16:45:09,653 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:45:09,708 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@12e80c8e
16:45:25,701 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:45:28,603 F: (ErlTextHover.java:296) : otp doc {local,msort,1}
16:45:36,314 F: (ErlTextHover.java:296) : otp doc {local,msort,1}
16:45:38,606 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:45:42,786 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:45:48,029 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:45:50,132 F: (ErlTextHover.java:296) : otp doc {local,msort,1}
16:45:51,596 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:45:51,689 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:45:51,781 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:45:51,871 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:45:54,021 F: (ErlangNodeLaunchShortcut.java:115) : ** Launch :: mergesort.erl
16:45:54,068 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:45:54,068 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:45:54,072 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:45:54,079 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:45:54,196 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:45:54,297 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5fa9f9b@Win81-HP-Laptop'}
16:45:54,298 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:45:54,321 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@7ca29d15
16:46:44,370 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:46:48,984 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:46:48,984 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:46:48,987 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:46:48,995 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:46:49,111 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:46:49,211 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5fb761e@Win81-HP-Laptop'}
16:46:49,211 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:46:49,235 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@2444c4a8
16:47:18,728 F: (ErlTextHover.java:296) : otp doc {local,mergesort,1}
16:47:20,991 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:47:30,438 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:47:38,702 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:47:38,828 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:47:38,895 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:47:38,966 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:47:39,037 F: (BuilderHelper.java:577) : :: loading mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:02,768 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
16:48:10,820 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:48:10,913 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:11,009 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:11,093 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:13,329 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:48:13,417 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:13,508 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:13,595 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:48:19,558 F: (BackendManager.java:90) : create execution backend LACPP_Assignment_4
16:48:19,558 F: (BackendFactory.java:57) : Create backend LACPP_Assignment_4
16:48:19,601 F: (OtpNodeProxy.java:309) : Runtime LACPP_Assignment_4@Win81-HP-Laptop starting
16:48:19,609 F: (OtpNodeProxy.java:214) : LACPP_Assignment_4@Win81-HP-Laptop: waiting connection to peer... 
16:48:19,725 F: (OtpNodeProxy.java:314) : Runtime LACPP_Assignment_4@Win81-HP-Laptop running
16:48:19,826 F: (LogEventHandler.java:27) : info: {"Monitoring java node",'jerlide_5fcd815@Win81-HP-Laptop'}
16:48:19,827 F: (LogEventHandler.java:27) : info: {"Start monitor process: ",10000000,50000000}
16:48:19,850 F: (ErlConsoleManager.java:50) : console ADDED to org.erlide.backend.api.BackendData@2903f5b0
16:49:42,197 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:49:52,824 F: (AbstractErlContentAssistProcessor.java:362) : no results
16:50:24,519 F: (AbstractErlContentAssistProcessor.java:362) : no results
16:50:42,441 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:50:49,662 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted_'}}
16:50:51,786 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:50:58,617 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:50:58,790 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:50:58,855 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:50:58,925 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:50:58,997 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:14,188 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted_'}}
16:51:16,437 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:51:16,529 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:16,600 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:16,671 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:16,743 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:32,878 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted_'}}
16:51:37,750 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:51:37,839 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:37,910 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:37,980 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:38,049 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:49,530 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="seq-2"></a><span class="bold_code">seq(From, To) -&gt; Seq</span><br><a name="seq-3"></a><span class="bold_code">seq(From, To, Incr) -&gt; Seq</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">From = To = Incr = integer()</span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code">Seq = [integer()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Returns a sequence of integers which starts with <span class="code">From</span>
          and contains the successive results of adding <span class="code">Incr</span> to
          the previous element, until <span class="code">To</span> has been reached or
          passed (in the latter case, <span class="code">To</span> is not an element of
          the sequence). <span class="code">Incr</span> defaults to 1.</p>
        <p>Failure: If <span class="code">To&lt;From-Incr</span> and <span class="code">Incr</span>
          is positive, or if <span class="code">To&gt;From-Incr</span> and <span class="code">Incr</span> is
          negative, or if <span class="code">Incr==0</span> and <span class="code">From/=To</span>.</p>
        <p>The following equalities hold for all sequences:</p>
        <div class="example"><pre>
length(lists:seq(From, To)) == To-From+1
length(lists:seq(From, To, Incr)) == (To-From+Incr) div Incr</pre></div>
        <p>Examples:</p>
        <div class="example"><pre>
&gt; <span class="bold_code">lists:seq(1, 10).</span>
[1,2,3,4,5,6,7,8,9,10]
&gt; <span class="bold_code">lists:seq(1, 20, 3).</span>
[1,4,7,10,13,16,19]
&gt; <span class="bold_code">lists:seq(1, 0, 1).</span>
[]
&gt; <span class="bold_code">lists:seq(10, 6, 4).</span>
[]
&gt; <span class="bold_code">lists:seq(1, 1, 0).</span>
[1]</pre></div>
      </p></div>
    <p>",{external,lists,seq,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/lists.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/lists.html","seq-2"}
16:51:50,818 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:51:50,910 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:50,982 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:51,054 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:51:51,123 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:03,549 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:52:03,638 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:03,709 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:03,781 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:03,852 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:35,540 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:52:39,934 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="atom_to_list-1"></a><span class="bold_code">atom_to_list(Atom) -&gt; string()</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">Atom = atom()</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Returns a string which corresponds to the text
          representation of <span class="code">Atom</span>.</p>
        <div class="example"><pre>
&gt; <span class="bold_code">atom_to_list('Erlang').</span>
"Erlang"</pre></div>
      </p></div>
    <p>",{external,erlang,atom_to_list,1,"./src/preloaded.erl"},"c:/Dev/Tools/erl6.2/erts-6.2/doc/html/erlang.html","atom_to_list-1"}
16:52:40,884 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:52:50,617 F: (ErlTextHover.java:296) : otp doc {error,{variable,'List_unsorted_'}}
16:52:56,662 F: (ErlTextHover.java:296) : otp doc {error,{variable,'M'}}
16:52:57,792 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:52:57,878 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:57,943 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:58,014 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:58,085 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:52:59,019 F: (ErlTextHover.java:296) : otp doc {error,{variable,'Sort_type'}}
16:53:12,886 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="seq-2"></a><span class="bold_code">seq(From, To) -&gt; Seq</span><br><a name="seq-3"></a><span class="bold_code">seq(From, To, Incr) -&gt; Seq</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">From = To = Incr = integer()</span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code">Seq = [integer()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Returns a sequence of integers which starts with <span class="code">From</span>
          and contains the successive results of adding <span class="code">Incr</span> to
          the previous element, until <span class="code">To</span> has been reached or
          passed (in the latter case, <span class="code">To</span> is not an element of
          the sequence). <span class="code">Incr</span> defaults to 1.</p>
        <p>Failure: If <span class="code">To&lt;From-Incr</span> and <span class="code">Incr</span>
          is positive, or if <span class="code">To&gt;From-Incr</span> and <span class="code">Incr</span> is
          negative, or if <span class="code">Incr==0</span> and <span class="code">From/=To</span>.</p>
        <p>The following equalities hold for all sequences:</p>
        <div class="example"><pre>
length(lists:seq(From, To)) == To-From+1
length(lists:seq(From, To, Incr)) == (To-From+Incr) div Incr</pre></div>
        <p>Examples:</p>
        <div class="example"><pre>
&gt; <span class="bold_code">lists:seq(1, 10).</span>
[1,2,3,4,5,6,7,8,9,10]
&gt; <span class="bold_code">lists:seq(1, 20, 3).</span>
[1,4,7,10,13,16,19]
&gt; <span class="bold_code">lists:seq(1, 0, 1).</span>
[]
&gt; <span class="bold_code">lists:seq(10, 6, 4).</span>
[]
&gt; <span class="bold_code">lists:seq(1, 1, 0).</span>
[1]</pre></div>
      </p></div>
    <p>",{external,lists,seq,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/lists.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/lists.html","seq-2"}
16:53:14,173 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:53:14,263 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:14,334 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:14,407 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:14,479 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:31,331 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:53:38,301 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:53:38,422 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:38,502 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:38,578 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:38,656 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:49,148 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:53:52,864 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:53:52,953 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:53,024 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:53,096 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:53,168 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:57,570 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:53:57,661 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:57,733 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:57,806 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:53:57,880 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:19,149 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:20,914 F: (ErlTextHover.java:296) : otp doc {local,test_mergesort_numeric,1}
16:54:24,460 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:28,496 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:31,457 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:34,556 F: (ErlTextHover.java:296) : otp doc {local,test_mergesort_numeric,2}
16:54:37,030 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:37,120 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:37,192 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:37,263 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:37,334 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:39,059 F: (ErlTextHover.java:296) : otp doc {ok,"<a name="seq-2"></a><span class="bold_code">seq(From, To) -&gt; Seq</span><br><a name="seq-3"></a><span class="bold_code">seq(From, To, Incr) -&gt; Seq</span><br><div class="REFBODY">
<p>Types:</p>
<div class="REFTYPES"><span class="bold_code">From = To = Incr = integer()</span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code"></span></div>
<div class="REFTYPES"><span class="bold_code">Seq = [integer()]</span></div>
</div></p>
<div class="REFBODY"><p>
        <p>Returns a sequence of integers which starts with <span class="code">From</span>
          and contains the successive results of adding <span class="code">Incr</span> to
          the previous element, until <span class="code">To</span> has been reached or
          passed (in the latter case, <span class="code">To</span> is not an element of
          the sequence). <span class="code">Incr</span> defaults to 1.</p>
        <p>Failure: If <span class="code">To&lt;From-Incr</span> and <span class="code">Incr</span>
          is positive, or if <span class="code">To&gt;From-Incr</span> and <span class="code">Incr</span> is
          negative, or if <span class="code">Incr==0</span> and <span class="code">From/=To</span>.</p>
        <p>The following equalities hold for all sequences:</p>
        <div class="example"><pre>
length(lists:seq(From, To)) == To-From+1
length(lists:seq(From, To, Incr)) == (To-From+Incr) div Incr</pre></div>
        <p>Examples:</p>
        <div class="example"><pre>
&gt; <span class="bold_code">lists:seq(1, 10).</span>
[1,2,3,4,5,6,7,8,9,10]
&gt; <span class="bold_code">lists:seq(1, 20, 3).</span>
[1,4,7,10,13,16,19]
&gt; <span class="bold_code">lists:seq(1, 0, 1).</span>
[]
&gt; <span class="bold_code">lists:seq(10, 6, 4).</span>
[]
&gt; <span class="bold_code">lists:seq(1, 1, 0).</span>
[1]</pre></div>
      </p></div>
    <p>",{external,lists,seq,2,"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/src/lists.erl"},"c:/Dev/Tools/erl6.2/lib/stdlib-2.2/doc/html/lists.html","seq-2"}
16:54:40,534 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:40,626 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:40,699 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:40,771 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:40,844 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:53,291 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:55,114 F: (ErlTextHover.java:296) : otp doc {error,{variable,'ListSize'}}
16:54:56,062 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:54:56,149 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:56,222 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:56,293 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:54:56,363 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:09,889 F: (ErlTextHover.java:296) : otp doc {local,run,1}
16:55:10,528 F: (ErlTextHover.java:296) : otp doc {local,export,1}
16:55:13,756 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:55:13,848 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:13,919 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:13,991 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:14,062 F: (BuilderHelper.java:577) : :: loading run_qsort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:18,680 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:55:18,771 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:18,843 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:18,914 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:18,993 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:56,296 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:55:56,420 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:56,495 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:56,567 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:55:56,638 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:56:05,308 F: (ErlTextHover.java:296) : otp doc {local,test_mergesort_numeric,2}
16:56:07,023 F: (InternalBuilder.java:202) : Will compile 1 resource(s)
16:56:07,112 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:56:07,185 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:56:07,256 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
16:56:07,329 F: (BuilderHelper.java:577) : :: loading run_mergesort in LACPP_Assignment_4@Win81-HP-Laptop
17:07:43,448 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
17:07:58,921 F: (OtpNodeProxy.java:279) : Runtime 17_c752b_Jesper_cfc7f8@Win81-HP-Laptop terminated
17:07:58,925 F: (OtpNodeProxy.java:279) : Runtime c752b_Jesper_cdc18c_erlide@Win81-HP-Laptop terminated
17:07:59,007 F: (OtpNodeProxy.java:279) : Runtime LACPP_Assignment_4@Win81-HP-Laptop terminated
17:07:59,377 W: (OtpNodeProxy.java:288) : Runtime LACPP_Assignment_4@Win81-HP-Laptop crashed, exit code: 1.
